## Sliding Window
Definition

A Sliding Window is a technique used to solve problems involving arrays, strings, or lists, where you want to find subarrays or substrings that satisfy a certain condition (like sum, length, maximum, minimum, etc.).

Instead of using nested loops, we “slide” a window over the data to reduce time complexity.

## Key Concepts

Window: A contiguous segment of the array/string.

Size: Can be fixed (e.g., 3 elements) or variable (expand/shrink as needed).

✅ Patterns in Sliding Window

Sliding Window problems generally follow these patterns:

## 1. Fixed-Size Sliding Window

Window size is fixed.

Common problems: maximum sum of k-length subarray, average of subarrays, etc.

Example: Find the maximum sum of any 3 consecutive elements in an array.

## 2. Variable-Size Sliding Window

Window size can grow or shrink based on conditions.

Common problems: longest substring without repeating characters, smallest subarray with sum ≥ k.

Steps:

Expand window until condition is met.

Shrink window from start until condition fails.

Track the result while moving the window.

## 3. Two-Pointer / Sliding Window Hybrid

Sliding window logic involves two pointers moving independently (start/end).

##### PROBLEMS
## VARIABLE SIZE WINDOW 
### 3. Longest Substring Without Repeating Characters
**Problem:** Given a string `s`, find the length of the longest substring without duplicate characters.  

**Examples:**  

**Example 1:**  
Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", length = 3.
## CODE 
from collections import defaultdict

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        ad = defaultdict(int)
        left = 0
        maxi = 0
        for r in range(len(s)):
            ad[s[r]] += 1
            while ad[s[r]] == 2:
                ad[s[left]] -= 1
                if ad[s[left]] == 0:
                    del ad[s[left]]
                left += 1
            maxi = max(maxi, r - left + 1)
        return maxi

Common problems: subarrays with at most k distinct elements, permutations, anagrams.

## 424. Longest Repeating Character Replacement
**Problem:** You are given a string `s` and an integer `k`. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most `k` times.  

Return the length of the longest substring containing the same letter after performing the operations.  

**Examples:**  

**Example 1:**  
Input: s = "ABAB", k = 2
Output: 4
Explanation: Replace the two 'A's with two 'B's or vice versa.

from collections import defaultdict

class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        count = defaultdict(int)  # stores frequency of letters in current window
        l = 0                      # left pointer of the window
        max_count = 0              # max frequency of a single char in window
        res = 0                    # result: max window length

        for r in range(len(s)):    # r is the right pointer
            count[s[r]] += 1
            max_count = max(max_count, count[s[r]])

            # shrink window if more than k replacements needed
            if (r - l + 1) - max_count > k:
                count[s[l]] -= 1
                if count[s[l]] == 0:
                    del count[s[l]]
                l += 1

            res = max(res, r - l + 1)

        return res

