# Two Pointers Problems In Linked List 
1st Pattern -- slow = 1x 
               fast 2x 
leet code sum numbers = 2095 , 876 

## Easy

### 876. Middle of the Linked List
**Problem:** Given the head of a singly linked list, return the middle node.  
If there are two middle nodes, return the second middle node.  

**Example 1:**  
Input: head = [1,2,3,4,5]
Output: [3,4,5]


**Solution (Python Example):**
```python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def middleNode(self, head: ListNode) -> ListNode:
        slow = head
        fast = head
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        return slow

### 2095 . Delete the Middle Node of a Linked List
**Problem:** You are given the head of a linked list. Delete the middle node and return the head of the modified linked list.  

The middle node of a linked list of size n is the ⌊n / 2⌋th node from the start using 0-based indexing.  
- For n = 1, 2, 3, 4, 5 → middle nodes are 0, 1, 1, 2, 2 respectively.

**Examples:**  

**Example 1:**  
Input: head = [1,3,4,7,1,2,6]
Output: [1,3,4,1,2,6]

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def deleteMiddle(self, head: Optional[ListNode]) -> Optional[ListNode]:
        slow = head
        fast = head
        prev = None
        if head.next == None:
            return None
        while fast and fast.next:
            prev = slow
            slow = slow.next
            fast = fast.next.next
        prev.next = slow.next
        return head
            
            
        





