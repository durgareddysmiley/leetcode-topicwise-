PREFIX SUM:
PATTERN 2 == DIFFERENCE ARRAY OR WE CAN ALSO CALLED INCREASING DECRESASING PATTERN 

1️⃣ What is a Difference Array?

A Difference Array is an array that helps you apply multiple range updates efficiently.

Instead of updating every element in a range [L, R], you just update two positions in the difference array.

After all updates, you rebuild the original array using a prefix sum.

💡 Shortcut Tip:
Whenever you see “many range updates” or “apply operations on subarrays efficiently”, think Difference Array / Prefix Sum.

4️⃣ Easy Way to Remember

“Difference Array = Update only start and end+1, rebuild with prefix sum.”

Start index: add value

End index +1: subtract value

Prefix sum: final array

###LeetCode Problem 1109: Corporate Flight Bookings

Problem:
There are n flights labeled from 1 to n. You are given a list of bookings,
where bookings[i] = [first, last, seats] represents a booking for flights
first through last (inclusive) with seats reserved.

Return an array answer of length n, where answer[i] is the total number of
seats reserved for flight i.

Example 1:
Input: bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5
Output: [10,55,45,25,25]
Explanation:
Flight labels:        1   2   3   4   5
Booking 1 reserved:  10  10
Booking 2 reserved:      20  20
Booking 3 reserved:      25  25  25  25
Total seats:         10  55  45  25  25

##CODE
from typing import List

class Solution:
    def corpFlightBookings(self, bookings: List[List[int]], n: int) -> List[int]:
        # Difference array to store range updates
        diff = [0] * (n + 2)  # n+2 to handle last+1 without index error
        
        # Apply all bookings as range updates
        for first, last, seats in bookings:
            diff[first] += seats
            diff[last + 1] -= seats
        
        # Rebuild final seat count array using prefix sum
        answer = []
        total = 0
        for i in range(1, n + 1):
            total += diff[i]
            answer.append(total)
        
        return answer
"""
LeetCode Problem 2848: Points That Intersect With Cars

Problem:
You are given a 0-indexed 2D array nums representing the coordinates of cars
parking on a number line. nums[i] = [start, end] where start is the starting
point of the ith car and end is the ending point.

Return the number of integer points on the line that are covered by any car.

Example 1:
Input: nums = [[3,6],[1,5],[4,7]]
Output: 7
Explanation: All points from 1 to 7 intersect at least one car.
##CODE

from typing import List

class Solution:
    def numberOfPoints(self, nums: List[List[int]]) -> int:
        # Use difference array to mark ranges
        freq = [0] * 102  # 1..100 plus extra for end+1
        
        # Apply all ranges as +1 at start, -1 at end+1
        for start, end in nums:
            freq[start] += 1
            freq[end + 1] -= 1
        
        # Prefix sum to rebuild coverage
        for i in range(1, 102):
            freq[i] += freq[i - 1]
        
        # Count points covered by at least one car
        count = 0
        for i in range(1, 102):
            if freq[i] > 0:
                count += 1
        
        return count
